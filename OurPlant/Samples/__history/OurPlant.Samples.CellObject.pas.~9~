// *****************************************************************************
//
//                       OurPlant OS Architecture
//                             for Delphi
//                                2019
//
// Copyrights 2019 @ Häcker Automation GmbH
// *****************************************************************************
unit OurPlant.Samples.CellObject;

interface

uses

  OurPlant.Common.CellObject,
  OurPlant.Common.CellAttributes,
  OurPlant.Common.DataCell,
  OurPlant.Samples.SkillInterface;

const
  C_TEST_CHILD_NAME=     'Cell Object Sample';
  C_TEST_CHILD_Type=     '{69B8A5C8-F7AB-4360-BA6D-65DA714B1E70}';
  C_TEST_CHILD_INTEGER=  66;
  C_TEST_CHILD_MIN=      -100;
  C_TEST_CHILD_MAX=      100;

type
  // Declaration of the skill interface sample IsiTestValueGetter
  IsiTestValueGetter = interface(IsiCellObject)
    ['{9998AC3A-6C66-4697-A643-5C5A13B7A8FD}']
    function siTestValueGetterGetIntegerField : Integer;
    procedure siTestValueGetterSetIntegerField(const aInteger : Integer);
    property siTestValueGetterIntegerField : Integer read siTestValueGetterGetIntegerField write siTestValueGetterSetIntegerField;

    function siTestValueGetterIntegerCell : IsiInteger;
  end;

  // Declaration of the cell object to the skill interface sample IsiTestValueGetter
  [RegisterCellType(C_TEST_CHILD_NAME,C_TEST_CHILD_Type)]   // Register the sample cell object class in DM

  // Building of individual sub cell
  [AddNewStringCell('TestString')]                          // add new cell "TestString" in root
  [AddNewStringCell('TestString/SubString')]                // add new cell "SubString" in sub cell "TestString"
  [AddNewStringCell('TestString/SubString/SubSubString')]   // add new cell "SubSubString" in sub cell"TestString\SubString"

  // Diverse Value Typen Samples
  [AddNewBooleanCell('TestBoolean')]
  [AddNewCellObject('TestDate')]
  [AddNewCellObject('TestTime')]
  [AddNewCellObject('TestDateTime')]

  // Add existing cells in other sub cell lists
  [AddExistingCell('TestString/SubString/SubSubString')]   // destination empty -> Add in root
  [AddExistingCell('TestString','TestBoolean')]            // add existing "TestBoolea" in "TestString"
  [AddExistingCell('TestString/SubString','TestDate')]     // add existing "TestDate" in "TestString\SubString"

  // Value Seeting in cell structure
  [SetValue('TestString','default text for TestString')]
  [SetValue('TestString/SubString','text additional sub string')]
  [SetValue('TestString/SubString/SubSubString','text additional sub sub string')]

  // teste diverse value typen zum schreiben auf allgmeines CellObject
  [SetValue('TestBoolean',True)]
  [SetDate('TestDate','1.1.2020')]                //Format: 'dd.mm.yyyy'
  [SetTime('TestTime','18:00')]                   //Format: 'hh:mm:ss'
  [SetDateTime('TestDateTime','1.1.2020 8:00')]   //Format: 'dd.mm.yyyy hh:mm:ss'

  TCellObjectTestChild = class(TCellObject, IsiTestValueGetter)
  strict protected

    // sample for internal working field, setted to a default value
    [SetFieldDefault(C_TEST_CHILD_INTEGER)]                // set Integer Field to C_TEST_CHILD_INTEGER
    fIntegerField : Integer;                                 // Test Integer as integer field

    // sample for an public data cell (Integer)
    [AddNewIntegerCell('IntegerCell')]                       // add a integer data cell with 'IntegerCell'
    [SetValue('IntegerCell',C_TEST_CHILD_INTEGER)]           // set the default to C_TEST_CHILD_INTEGER
    fIntegerCell : IsiInteger;                               // hold the ref of cell in fIntegerCell

  public
    // implementation of skill interface IsiTestValueGetter
    function siTestValueGetterGetIntegerField : Integer;
    procedure siTestValueGetterSetIntegerField(const aInteger : Integer);
    function siTestValueGetterIntegerCell : IsiInteger;
  end;

implementation

uses
  System.Rtti,
  System.SysUtils;

{ TCellObjectTestChildClass }

// Implementation of skill interface methods of cell object
function TCellObjectTestChild.siTestValueGetterGetIntegerField: Integer;
begin
  Result := fIntegerField;
end;

procedure TCellObjectTestChild.siTestValueGetterSetIntegerField(const aInteger : Integer);
begin
  fIntegerField:= aInteger;
end;

function TCellObjectTestChild.siTestValueGetterIntegerCell : IsiInteger;
begin
  Result:= fIntegerCell;
end;

end.
